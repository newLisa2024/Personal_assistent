# handlers.py
from datetime import datetime
from concurrent.futures import ThreadPoolExecutor, TimeoutError
from functools import partial
import telebot
import openai
from loguru import logger
from telebot import types
from typing import Dict, Any

from config import RESUME_FILE_PATH
from prompt import get_system_prompt
from utils import load_resume, is_user_subscribed, check_session_expired


def register_handlers(bot: telebot.TeleBot, client: openai.OpenAI) -> Dict[int, Dict[str, Any]]:
    user_context: Dict[int, Dict[str, Any]] = {}

    def check_and_cache_subscription(chat_id: int) -> bool:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏ –∫–µ—à–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            if user_context[chat_id].get("subscribed") is None:
                is_subscribed = is_user_subscribed(bot, chat_id, "@PromptGuideElena")
                user_context[chat_id]["subscribed"] = is_subscribed

                if not is_subscribed:
                    bot.send_message(
                        chat_id,
                        "üìå –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª:\n"
                        "https://t.me/PromptGuideElena\n\n"
                        "–ü–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è."
                    )
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω")
                else:
                    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {chat_id} –ø–æ–¥–ø–∏—Å–∞–Ω")
            return user_context[chat_id]["subscribed"]
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏: {e}")
            return False

    def get_openai_response(chat_id: int, prompt: str) -> str:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ OpenAI —Å —É—á–µ—Ç–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            messages = user_context[chat_id]["messages"]
            messages.append({"role": "user", "content": prompt})

            response = client.chat.completions.create(
                model="gpt-4o",
                messages=messages,
                temperature=0.7,
                max_tokens=1500
            )
            response_text = response.choices[0].message.content
            messages.append({"role": "assistant", "content": response_text})
            return response_text
        except openai.AuthenticationError as e:
            logger.error(f"OpenAI Auth Error: {e}")
            return "–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É."
        except openai.APIError as e:
            logger.error(f"OpenAI API Error: {e}")
            return "–°–µ—Ä–≤–∏—Å –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        except Exception as e:
            logger.error(f"Unexpected error: {e}")
            return "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."

    def safe_message_processing(chat_id: int, message_text: str) -> str:
        """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
        try:
            with ThreadPoolExecutor(max_workers=1) as executor:
                future = executor.submit(
                    partial(get_openai_response, chat_id, message_text)
                )
                return future.result(timeout=20)
        except TimeoutError:
            logger.error("–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ OpenAI")
            return "–í—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞ –ø—Ä–µ–≤—ã—à–µ–Ω–æ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –∫–æ—Ä–æ—á–µ."
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞."

    @bot.message_handler(commands=['start'])
    def start_conversation(message: types.Message):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏"""
        chat_id = message.chat.id
        try:
            resume_content = load_resume()
            user_context[chat_id] = {
                "messages": [{"role": "system", "content": get_system_prompt(resume_content)}],
                "joke_count": 0,
                "question_count": 0,
                "subscribed": None,
                "last_message_time": datetime.now().isoformat()
            }

            welcome_text = (
                "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! üëã\n\n"
                "–Ø ‚Äî –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ï–ª–µ–Ω—ã –õ–æ—Å–∫—É—Ç–æ–≤–æ–π, —ç–∫—Å–ø–µ—Ä—Ç–∞ –ø–æ:\n"
                "‚Ä¢ –ù–µ–π—Ä–æ—Å–µ—Ç—è–º –∏ AI-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∞–º\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø—Ä–æ—Ü–µ—Å—Å–æ–≤\n"
                "‚Ä¢ –†–∞–∑—Ä–∞–±–æ—Ç–∫–µ —á–∞—Ç-–±–æ—Ç–æ–≤\n\n"
                "üìå –ú–æ–≥—É –ø–æ–º–æ—á—å:\n"
                "‚Üí –ü–æ–¥–æ–±—Ä–∞—Ç—å —Ä–µ—à–µ–Ω–∏—è –¥–ª—è –≤–∞—à–∏—Ö –∑–∞–¥–∞—á\n"
                "‚Üí –û–±—ä—è—Å–Ω–∏—Ç—å —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –ø—Ä–æ—Å—Ç—ã–º —è–∑—ã–∫–æ–º\n"
                "‚Üí –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ç–æ—Ç–∏–ø —Å–∏—Å—Ç–µ–º—ã –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏\n\n"
                "‚ö†Ô∏è –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ:\n"
                "‚Ä¢ –°–µ—Å—Å–∏—è –¥–ª–∏—Ç—Å—è 30 –º–∏–Ω—É—Ç\n"
                "‚Ä¢ –î–æ—Å—Ç—É–ø–Ω–æ 20 –≤–æ–ø—Ä–æ—Å–æ–≤ –∑–∞ —Å–µ—Å—Å–∏—é\n"
                "‚Ä¢ –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª\n\n"
                "–ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å? üòä"
            )

            bot.send_message(
                chat_id,
                welcome_text,
                parse_mode='Markdown',
                reply_markup=types.ReplyKeyboardRemove()
            )
            logger.success(f"–ù–æ–≤–∞—è —Å–µ—Å—Å–∏—è: {chat_id}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—Ç–∞—Ä—Ç–∞ —Å–µ—Å—Å–∏–∏: {e}")
            bot.send_message(chat_id, "–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @bot.message_handler(func=lambda m: m.text.lower().strip() == "—Å—Ç–∞—Ä—Ç")
    def start_button_handler(message: types.Message):
        start_conversation(message)

    @bot.message_handler(func=lambda m: True)
    def handle_message(message: types.Message):
        """–û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        chat_id = message.chat.id
        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –ø–µ—Ä–≤–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
            if chat_id not in user_context:
                start_conversation(message)
                return

            data = user_context[chat_id]

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ –≤–æ–ø—Ä–æ—Å–æ–≤
            if data["question_count"] >= 20:
                bot.send_message(
                    chat_id,
                    "‚è≥ –õ–∏–º–∏—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å—á–µ—Ä–ø–∞–Ω. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è:\n"
                    "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ –Ω–∞–ø—Ä—è–º—É—é: @ElenaAIExpert\n"
                    "‚Ä¢ –ò–ª–∏ –Ω–∞—á–Ω–∏—Ç–µ –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é –∫–æ–º–∞–Ω–¥–æ–π /start"
                )
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
            if data["subscribed"] is None and not check_and_cache_subscription(chat_id):
                return

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∞–π–º–∞—É—Ç–∞ —Å–µ—Å—Å–∏–∏
            if check_session_expired(user_context, chat_id):
                bot.send_message(chat_id, "‚è≥ –°–µ—Å—Å–∏—è –∏—Å—Ç–µ–∫–ª–∞. –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –Ω–∞–∂–º–∏—Ç–µ /start")
                return

            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞
            data["question_count"] += 1
            user_context[chat_id]["last_message_time"] = datetime.now().isoformat()

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ª–∏–º–∏—Ç–µ
            if data["question_count"] == 18:
                bot.send_message(chat_id, "‚ÑπÔ∏è –û—Å—Ç–∞–ª–æ—Å—å 2 –≤–æ–ø—Ä–æ—Å–∞ –≤ —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏")

            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞–Ω–µ–∫–¥–æ—Ç–æ–≤
            if "–∞–Ω–µ–∫–¥–æ—Ç" in message.text.lower():
                data["joke_count"] += 1
                response = safe_message_processing(chat_id,
                                                   f"–†–∞—Å—Å–∫–∞–∂–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∞–Ω–µ–∫–¥–æ—Ç ‚Ññ{data['joke_count']} –ø—Ä–æ IT")
                bot.send_message(chat_id, response)
                return

            # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
            response_text = safe_message_processing(chat_id, message.text)
            bot.send_message(chat_id, response_text)
            logger.info(f"–û—Ç–≤–µ—Ç –¥–ª—è {chat_id}: {response_text[:100]}...")

        except Exception as e:
            logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
            bot.send_message(chat_id, "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    return user_context